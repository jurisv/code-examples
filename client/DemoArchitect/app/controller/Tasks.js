/*
 * File: app/controller/Tasks.js
 *
 * This file was generated by Sencha Architect version 3.0.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.2.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.2.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('DemoArchitect.controller.Tasks', {
    extend: 'Ext.app.Controller',

    stores: [
        'Tasks'
    ],

    refs: [
        {
            ref: 'detailsPanel',
            selector: '#detailsPanel'
        },
        {
            ref: 'detailsToolbar',
            selector: '#detailsPanel #detailsToolbar'
        }
    ],

    view: function(target, record) {

        var details = this.getDetailsPanel(),	// Get detail panel via controller ref
        	toolbar = this.getDetailsToolbar();	// Get detail panel toolbar via controller ref

        // Update the detail panel with the selected row's data
        details.update(record.data);

        // Show toolbar
        toolbar.show();

    },

    add: function(target) {
        var record = Ext.create('DemoArchitect.model.Task', {dueDate: new Date()}); //insert record with date
        record.save({
            callback:function(records, operation, success){
                //we add to store only after successful insertion at the server-side
                if(success){
                    Ext.getStore('Tasks').add(records);

                    var formWindow = Ext.create('widget.taskform'),	// Create new form window
                        form = formWindow.down('form').getForm();	// Get form within window
                        //model = Ext.create('model.task');		// Create new Task model

        // Associate model with form
                    form.loadRecord(record);

        // Show window
                    formWindow.show();

                }else{
                    console.log('Failure to add record: ', arguments);
                }
            }
        });
    },

    edit: function(target) {

        var data = target.up('panel').data,						// Get panel's assosiated data
        	store = this.getTasksStore(),						// Get Tasks store
        	task = store.getById(data.id),						// Get current task
            formWindow = Ext.create('widget.taskform'),			// Create new form window
        	form = formWindow.down('form').getForm();			// Get form within window

        // Load task model into form
        form.loadRecord(task);

        // Show window
        formWindow.show();

    },

    save: function(target) {
        var form = target.up('form').getForm(),			// Get parent form
            formWindow = target.up('window'),			// Get parent window
            detailsPanel = this.getDetailsPanel(),		// Get details panel
            task = form.getRecord(),					// Get task associated with form
            store = this.getTasksStore();				// Get Records store


        // Update associated task with form values
        var errors = form.updateRecord();

        // Valid
        if (form.isValid()) {

            var record = form.getRecord();
            form.updateRecord(record);

            record.save({
                success: function(record, operation) {
                    record.commit(); // ##Juris :: Commit record in the store
                    console.log('success', record, operation);
                    // update form from computed remote record
                    form.loadRecord(record);
                    // Update detail panel
                    detailsPanel.update(task.getData());
                    formWindow.destroy();
                },
                failure: function(record, operation) {
                    var exception = operation.getError();
                    if (exception && exception.errors) form.markInvalid(exception.errors);
                    console.log('failure', record, operation, exception);
                    formWindow.destroy();
                },
                scope: this
            });
        }

        // Invalid
        else {

            // Show errors on form
            form.markInvalid(errors);

        }
    },

    cancelEdit: function(target) {

        // Get the window and close it
        var formWindow = target.up("window");
        	formWindow.destroy();

    },

    remove: function(target) {
        var me = this;

        // Confirm this delete
        Ext.Msg.confirm('Confirm', 'Are you sure you want to delete this task?', function(btn) {

            // User confirmed yes
            if (btn == 'yes') {

                var data = target.up('panel').data,				// Get assosiated data
                    store = me.getTasksStore(),					// Get tasks store
                    task = store.getById(data.id),				// Get current task
                    detailsPanel = me.getDetailsPanel(),		// Get details panel
                    detailsToolbar = me.getDetailsToolbar();	// Get details panel toolbar

                store.remove(task);

                task.destroy({
                    callback:function(records, operation){
                        var success = operation.wasSuccessful();

                        if(success){

                            console.log('Sucessfully removed record: ', arguments);
                        }else{
                            store.insert(task.index, task);
                            console.log('Failure to remove record: ', arguments);
                            Ext.Msg.alert('Server side Error', 'Unable to remove the record');
                        }
                    }
                });


                // Clear panel content
                detailsPanel.update(null);

                // Hide toolbar
                detailsToolbar.hide();

            }
        });
    },

    onGridpanelRender: function(component, eOpts) {
            component.getStore().load();

    },

    init: function(application) {
        this.control({
            "#gridPanel": {
                select: this.view,
                render: this.onGridpanelRender
            },
            "#mainPanel #addButton": {
                click: this.add
            },
            "#detailsPanel #editButton": {
                click: this.edit
            },
            "#recordForm #saveButton": {
                click: this.save
            },
            "#recordForm #cancelButton": {
                click: this.cancelEdit
            },
            "#detailsPanel #removeButton": {
                click: this.remove
            }
        });
    }

});
